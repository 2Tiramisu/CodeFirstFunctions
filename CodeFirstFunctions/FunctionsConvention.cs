// Copyright (c) Pawel Kadluczka, Inc. All rights reserved. See License.txt in the project root for license information.

namespace CodeFirstFunctions
{
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Core.Mapping;
    using System.Data.Entity.Core.Metadata.Edm;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.ModelConfiguration.Conventions;
    using System.Diagnostics;
    using System.Linq;

    public class FunctionsConvention<T> : IStoreModelConvention<EntityContainer>
        where T : DbContext
    {
        private readonly string _defaultSchema;

        public FunctionsConvention(string defaultSchema)
        {
            _defaultSchema = defaultSchema;
        }

        public void Apply(EntityContainer item, DbModel model)
        {
            var functionImports = new FunctionDiscovery(model, typeof (T)).FindFunctionImports();
            var storeFunctionBuilder = new StoreFunctionBuilder(model, _defaultSchema);

            foreach (var functionImport in functionImports)
            {
                var functionImportDefinition = CreateFunctionImport(model, functionImport);
                var storeFunctionDefinition = storeFunctionBuilder.Create(functionImport);
                model.ConceptualModel.Container.AddFunctionImport(functionImportDefinition);
                model.StoreModel.AddItem(storeFunctionDefinition);


                if (functionImportDefinition.IsComposableAttribute)
                {
                    model.ConceptualToStoreMapping.AddFunctionImportMapping(
                        new FunctionImportMappingComposable(
                            functionImportDefinition,
                            storeFunctionDefinition,
                            new FunctionImportResultMapping(),
                            model.ConceptualToStoreMapping));
                }
                else
                {
                    model.ConceptualToStoreMapping.AddFunctionImportMapping(
                        new FunctionImportMappingNonComposable(
                            functionImportDefinition,
                            storeFunctionDefinition,
                            new FunctionImportResultMapping[0],
                            model.ConceptualToStoreMapping));
                }
            }

            // TODO: stored proc, scalar functions?, model defined functions?, multiple result sets?
        }

        private EdmFunction CreateFunctionImport(DbModel model, FunctionImport functionImport)
        {
            List<EntitySet> entitySets = null;
            if (functionImport.ReturnType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
            {
                // TODO: derived types?
                entitySets =
                    model.ConceptualModel.Container.EntitySets.Where(s => s.ElementType == functionImport.ReturnType)
                        .ToList();

                Debug.Assert(entitySets.Count == 1, "Invalid model (MEST)");
            }

            var functionPayload =
                new EdmFunctionPayload
                {
                    Parameters =
                        functionImport
                            .Parameters
                            .Select(p => FunctionParameter.Create(p.Key, p.Value, ParameterMode.In))
                            .ToList(),
                    ReturnParameters = new[]
                    {
                        FunctionParameter.Create(
                            "ReturnParam",
                            functionImport.ReturnType.GetCollectionType(),
                            ParameterMode.ReturnValue)
                    },
                    IsComposable = functionImport.IsComposable,
                    IsFunctionImport = true,
                    EntitySets = entitySets
                };

            return EdmFunction.Create(
                functionImport.Name,
                model.ConceptualModel.Container.Name,
                DataSpace.CSpace,
                functionPayload,
                null);
        }
    }
}




////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was generated from a template.
////
////     Manual changes to this file may cause unexpected behavior in your application.
////     Manual changes to this file will be overwritten if the code is regenerated.
//// </auto-generated>
////------------------------------------------------------------------------------

//namespace TestCSharpCodeGen
//{
//    using System;
//    using System.Data.Entity;
//    using System.Data.Entity.Infrastructure;
//    using System.Data.Entity.Core.Objects;
//    using System.Linq;

//    public partial class NorthwindEF5Entities2 : DbContext
//    {
//        public NorthwindEF5Entities2()
//            : base("name=NorthwindEF5Entities2")
//        {
//        }

//        protected override void OnModelCreating(DbModelBuilder modelBuilder)
//        {
//            throw new UnintentionalCodeFirstException();
//        }

//        public virtual DbSet<Category> Categories { get; set; }
//        public virtual DbSet<Customer> Customers { get; set; }
//        public virtual DbSet<Order> Orders { get; set; }
//        public virtual DbSet<Supplier> Suppliers { get; set; }

//        [DbFunction("NorthwindEF5Entities2", "fx_CustomerLocationForCountry")]
//        public virtual IQueryable<fx_CustomerLocationForCountry_Result> fx_CustomerLocationForCountry(string country)
//        {
//            var countryParameter = country != null ?
//                new ObjectParameter("country", country) :
//                new ObjectParameter("country", typeof(string));

//            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fx_CustomerLocationForCountry_Result>("[NorthwindEF5Entities2].[fx_CustomerLocationForCountry](@country)", countryParameter);
//        }

//        [DbFunction("NorthwindEF5Entities2", "fx_OrdersForShippingStatus")]
//        public virtual IQueryable<fx_OrdersForShippingStatus_Result> fx_OrdersForShippingStatus(Nullable<int> shippingStatus)
//        {
//            var shippingStatusParameter = shippingStatus.HasValue ?
//                new ObjectParameter("shippingStatus", shippingStatus) :
//                new ObjectParameter("shippingStatus", typeof(int));

//            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fx_OrdersForShippingStatus_Result>("[NorthwindEF5Entities2].[fx_OrdersForShippingStatus](@shippingStatus)", shippingStatusParameter);
//        }

//        [DbFunction("NorthwindEF5Entities2", "fx_SuppliersWithinRange")]
//        public virtual IQueryable<fx_SuppliersWithinRange_Result> fx_SuppliersWithinRange(Nullable<int> miles, System.Data.Entity.Spatial.DbGeography location)
//        {
//            var milesParameter = miles.HasValue ?
//                new ObjectParameter("miles", miles) :
//                new ObjectParameter("miles", typeof(int));

//            var locationParameter = location != null ?
//                new ObjectParameter("location", location) :
//                new ObjectParameter("location", typeof(System.Data.Entity.Spatial.DbGeography));

//            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fx_SuppliersWithinRange_Result>("[NorthwindEF5Entities2].[fx_SuppliersWithinRange](@miles, @location)", milesParameter, locationParameter);
//        }

//        public virtual ObjectResult<Customer_With_Recent_Orders_Result> Customer_With_Recent_Orders(string customerID)
//        {
//            var customerIDParameter = customerID != null ?
//                new ObjectParameter("CustomerID", customerID) :
//                new ObjectParameter("CustomerID", typeof(string));

//            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer_With_Recent_Orders_Result>("Customer_With_Recent_Orders", customerIDParameter);
//        }

//        public virtual ObjectResult<Employee_Sales_by_Country_Result> Employee_Sales_by_Country(Nullable<System.DateTime> beginning_Date, Nullable<System.DateTime> ending_Date)
//        {
//            var beginning_DateParameter = beginning_Date.HasValue ?
//                new ObjectParameter("Beginning_Date", beginning_Date) :
//                new ObjectParameter("Beginning_Date", typeof(System.DateTime));

//            var ending_DateParameter = ending_Date.HasValue ?
//                new ObjectParameter("Ending_Date", ending_Date) :
//                new ObjectParameter("Ending_Date", typeof(System.DateTime));

//            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee_Sales_by_Country_Result>("Employee_Sales_by_Country", beginning_DateParameter, ending_DateParameter);
//        }

//        public virtual ObjectResult<Sales_by_Year_Result> Sales_by_Year(Nullable<System.DateTime> beginning_Date, Nullable<System.DateTime> ending_Date)
//        {
//            var beginning_DateParameter = beginning_Date.HasValue ?
//                new ObjectParameter("Beginning_Date", beginning_Date) :
//                new ObjectParameter("Beginning_Date", typeof(System.DateTime));

//            var ending_DateParameter = ending_Date.HasValue ?
//                new ObjectParameter("Ending_Date", ending_Date) :
//                new ObjectParameter("Ending_Date", typeof(System.DateTime));

//            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sales_by_Year_Result>("Sales_by_Year", beginning_DateParameter, ending_DateParameter);
//        }

//        public virtual ObjectResult<Ten_Most_Expensive_Products_Result> Ten_Most_Expensive_Products()
//        {
//            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ten_Most_Expensive_Products_Result>("Ten_Most_Expensive_Products");
//        }
//    }
//}